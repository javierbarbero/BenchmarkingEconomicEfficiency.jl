var documenterSearchIndex = {"docs":
[{"location":"cost/costddf/","page":"Cost Directional Distance Function model","title":"Cost Directional Distance Function model","text":"CurrentModule = BenchmarkingEconomicEfficiency\nDocTestSetup = quote\n    using BenchmarkingEconomicEfficiency\nend","category":"page"},{"location":"cost/costddf/#Cost-Directional-Distance-Function-model","page":"Cost Directional Distance Function model","title":"Cost Directional Distance Function model","text":"","category":"section"},{"location":"cost/costddf/","page":"Cost Directional Distance Function model","title":"Cost Directional Distance Function model","text":"The cost directional distance function model is computed by solving a directional distance function DEA model for the technical efficiency.","category":"page"},{"location":"cost/costddf/","page":"Cost Directional Distance Function model","title":"Cost Directional Distance Function model","text":"In this example we compute the cost efficiency directional distance function measure under variable returns to scale:","category":"page"},{"location":"cost/costddf/","page":"Cost Directional Distance Function model","title":"Cost Directional Distance Function model","text":"julia> X = [2 2; 1 4; 4 1; 4 3; 5 5; 6 1; 2 5; 1.6 8];\n\njulia> Y = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> W = [1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1];\n\njulia> costddf = deacostddf(X, Y, W, Gx = :Monetary)\nCost DDF DEA Model \nDMUs = 8; Inputs = 2; Outputs = 1\nOrientation = Input; Returns to Scale = VRS\nGx = Monetary\n──────────────────────────────\n   Cost  Technical  Allocative\n──────────────────────────────\n1   0.0    0.0        0.0\n2   1.0    0.0        1.0\n3   1.0    0.0        1.0\n4   3.0    2.66667    0.333333\n5   6.0    6.0        0.0\n6   3.0    0.0        3.0\n7   3.0    2.0        1.0\n8   5.6    1.2        4.4\n──────────────────────────────","category":"page"},{"location":"cost/costddf/","page":"Cost Directional Distance Function model","title":"Cost Directional Distance Function model","text":"Estimated economic, technical and allocative efficiency scores are returned with the efficiency function:","category":"page"},{"location":"cost/costddf/","page":"Cost Directional Distance Function model","title":"Cost Directional Distance Function model","text":"julia> efficiency(costddf, :Economic)\n8-element Vector{Float64}:\n 0.0\n 1.0\n 1.0\n 3.0\n 6.0\n 3.0\n 3.0\n 5.6\n\njulia> efficiency(costddf, :Technical)\n8-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n 2.666666666666666\n 6.0\n 0.0\n 2.0\n 1.2000000000000002\n\njulia> efficiency(costddf, :Allocative)\n8-element Vector{Float64}:\n 0.0\n 1.0\n 1.0\n 0.3333333333333339\n 0.0\n 3.0\n 1.0\n 4.3999999999999995","category":"page"},{"location":"cost/costddf/#deacostddf-Function-Documentation","page":"Cost Directional Distance Function model","title":"deacostddf Function Documentation","text":"","category":"section"},{"location":"cost/costddf/","page":"Cost Directional Distance Function model","title":"Cost Directional Distance Function model","text":"deacostddf","category":"page"},{"location":"cost/costddf/#BenchmarkingEconomicEfficiency.deacostddf","page":"Cost Directional Distance Function model","title":"BenchmarkingEconomicEfficiency.deacostddf","text":"deacostddf(X, Y, W; Gx)\n\nCompute cost efficiency using directional distance function DEA model for inputs X, outputs Y and price of inputs W.\n\nDirection specification:\n\nThe direction Gx can be one of the following symbols.\n\n:Ones: use ones.\n:Observed: use observed values.\n:Mean: use column means.\n:Monetary: use direction so that profit inefficiency is expressed in monetary values.\n\nAlternatively, a vector or matrix with the desired directions can be supplied.\n\nOptional Arguments\n\nrts=:VRS: chooses variable returns to scale. For constant returns to scale choose :CRS.\n\nExamples\n\njulia> X = [2 2; 1 4; 4 1; 4 3; 5 5; 6 1; 2 5; 1.6 8];\n\njulia> Y = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> W = [1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1];\n\njulia> deacostddf(X, Y, W, Gx = :Monetary)\nCost DDF DEA Model \nDMUs = 8; Inputs = 2; Outputs = 1\nOrientation = Input; Returns to Scale = VRS\nGx = Monetary\n──────────────────────────────\n   Cost  Technical  Allocative\n──────────────────────────────\n1   0.0    0.0        0.0\n2   1.0    0.0        1.0\n3   1.0    0.0        1.0\n4   3.0    2.66667    0.333333\n5   6.0    6.0        0.0\n6   3.0    0.0        3.0\n7   3.0    2.0        1.0\n8   5.6    1.2        4.4\n──────────────────────────────\n\n\n\n\n\n","category":"function"},{"location":"#BenchmarkingEconomicEfficiency.jl","page":"Home","title":"BenchmarkingEconomicEfficiency.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BenchmarkingEconomicEfficiency.jl is a Julia package that provides functions for economic efficiency using Data Envelopment Analysis (DEA). The package is an extension of the DataEnvelopmentAnalysis.jl package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package is being developed for Julia 1.0 and above on Linux, macOS, and Windows.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The packes uses internally the JuMP modelling language for mathematicall optimization with solvers GLPK and Ipopt.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package can be installed with the Julia package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg; Pkg.add(\"BenchmarkingEconomicEfficiency\")","category":"page"},{"location":"#Tutorial","page":"Home","title":"Tutorial","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For a tutorial on how to use the package, check the documentation on the Cost Directional Distance Function model.","category":"page"},{"location":"#Available-models","page":"Home","title":"Available models","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Cost DEA models:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"cost/costddf.md\"]\nDepth = 2","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DataEnvelopmentAnalysis.jl is being developed by Javier Barbero and José Luís Zofío.","category":"page"},{"location":"optimizer/#Configuring-the-optimizer","page":"Configuring Optimizer","title":"Configuring the optimizer","text":"","category":"section"},{"location":"optimizer/","page":"Configuring Optimizer","title":"Configuring Optimizer","text":"BenchmarkingEconomicEfficiency.jl will use a default optimizer/solver for each DEA model, as shown in the next table.","category":"page"},{"location":"optimizer/","page":"Configuring Optimizer","title":"Configuring Optimizer","text":"Function Specific Options Problem type Default Optimizer\ndeacostddf  LP GLPK","category":"page"},{"location":"optimizer/","page":"Configuring Optimizer","title":"Configuring Optimizer","text":"Where:","category":"page"},{"location":"optimizer/","page":"Configuring Optimizer","title":"Configuring Optimizer","text":"LP = Linear programming.\nNLP = Nonlinear programming.","category":"page"},{"location":"optimizer/","page":"Configuring Optimizer","title":"Configuring Optimizer","text":"Models can be solved using a different optimizer by passing a DEAOptimizer object to the optimizer optional argument. For instruction, see the documentation on the DataEnvelopmentAnalysis package.","category":"page"}]
}
