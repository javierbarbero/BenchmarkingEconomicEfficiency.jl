var documenterSearchIndex = {"docs":
[{"location":"cost/costddf/","page":"Cost Directional Distance Function model","title":"Cost Directional Distance Function model","text":"CurrentModule = BenchmarkingEconomicEfficiency\nDocTestSetup = quote\n    using BenchmarkingEconomicEfficiency\nend","category":"page"},{"location":"cost/costddf/#Cost-Directional-Distance-Function-model","page":"Cost Directional Distance Function model","title":"Cost Directional Distance Function model","text":"","category":"section"},{"location":"cost/costddf/","page":"Cost Directional Distance Function model","title":"Cost Directional Distance Function model","text":"The cost directional distance function model is computed by solving a directional distance function DEA model for the technical efficiency.","category":"page"},{"location":"cost/costddf/","page":"Cost Directional Distance Function model","title":"Cost Directional Distance Function model","text":"In this example we compute the cost efficiency directional distance function measure under variable returns to scale:","category":"page"},{"location":"cost/costddf/","page":"Cost Directional Distance Function model","title":"Cost Directional Distance Function model","text":"julia> X = [2 2; 1 4; 4 1; 4 3; 5 5; 6 1; 2 5; 1.6 8];\n\njulia> Y = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> W = [1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1];\n\njulia> costddf = deacostddf(X, Y, W, Gx = :Monetary)\nCost DDF DEA Model \nDMUs = 8; Inputs = 2; Outputs = 1\nOrientation = Input; Returns to Scale = VRS\nGx = Monetary\n──────────────────────────────\n   Cost  Technical  Allocative\n──────────────────────────────\n1   0.0    0.0        0.0\n2   1.0    0.0        1.0\n3   1.0    0.0        1.0\n4   3.0    2.66667    0.333333\n5   6.0    6.0        0.0\n6   3.0    0.0        3.0\n7   3.0    2.0        1.0\n8   5.6    1.2        4.4\n──────────────────────────────","category":"page"},{"location":"cost/costddf/","page":"Cost Directional Distance Function model","title":"Cost Directional Distance Function model","text":"Estimated economic, technical and allocative efficiency scores are returned with the efficiency function:","category":"page"},{"location":"cost/costddf/","page":"Cost Directional Distance Function model","title":"Cost Directional Distance Function model","text":"julia> efficiency(costddf, :Economic)\n8-element Vector{Float64}:\n 0.0\n 1.0\n 1.0\n 3.0\n 6.0\n 3.0\n 3.0\n 5.6\n\njulia> efficiency(costddf, :Technical)\n8-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n 2.666666666666666\n 6.0\n 0.0\n 2.0\n 1.2000000000000002\n\njulia> efficiency(costddf, :Allocative)\n8-element Vector{Float64}:\n 0.0\n 1.0\n 1.0\n 0.3333333333333339\n 0.0\n 3.0\n 1.0\n 4.3999999999999995","category":"page"},{"location":"cost/costddf/#deacostddf-Function-Documentation","page":"Cost Directional Distance Function model","title":"deacostddf Function Documentation","text":"","category":"section"},{"location":"cost/costddf/","page":"Cost Directional Distance Function model","title":"Cost Directional Distance Function model","text":"deacostddf","category":"page"},{"location":"cost/costddf/#BenchmarkingEconomicEfficiency.deacostddf","page":"Cost Directional Distance Function model","title":"BenchmarkingEconomicEfficiency.deacostddf","text":"deacostddf(X, Y, W; Gx)\n\nCompute cost efficiency using directional distance function DEA model for inputs X, outputs Y and price of inputs W.\n\nDirection specification:\n\nThe direction Gx can be one of the following symbols.\n\n:Ones: use ones.\n:Observed: use observed values.\n:Mean: use column means.\n:Monetary: use direction so that profit inefficiency is expressed in monetary values.\n\nAlternatively, a vector or matrix with the desired directions can be supplied.\n\nOptional Arguments\n\nrts=:VRS: chooses variable returns to scale. For constant returns to scale choose :CRS.\n\nExamples\n\njulia> X = [2 2; 1 4; 4 1; 4 3; 5 5; 6 1; 2 5; 1.6 8];\n\njulia> Y = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> W = [1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1];\n\njulia> deacostddf(X, Y, W, Gx = :Monetary)\nCost DDF DEA Model \nDMUs = 8; Inputs = 2; Outputs = 1\nOrientation = Input; Returns to Scale = VRS\nGx = Monetary\n──────────────────────────────\n   Cost  Technical  Allocative\n──────────────────────────────\n1   0.0    0.0        0.0\n2   1.0    0.0        1.0\n3   1.0    0.0        1.0\n4   3.0    2.66667    0.333333\n5   6.0    6.0        0.0\n6   3.0    0.0        3.0\n7   3.0    2.0        1.0\n8   5.6    1.2        4.4\n──────────────────────────────\n\n\n\n\n\n","category":"function"},{"location":"revenue/revenueddf/","page":"Revenue Directional Distance Function model","title":"Revenue Directional Distance Function model","text":"CurrentModule = BenchmarkingEconomicEfficiency\nDocTestSetup = quote\n    using BenchmarkingEconomicEfficiency\nend","category":"page"},{"location":"revenue/revenueddf/#Revenue-Directional-Distance-Function-model","page":"Revenue Directional Distance Function model","title":"Revenue Directional Distance Function model","text":"","category":"section"},{"location":"revenue/revenueddf/","page":"Revenue Directional Distance Function model","title":"Revenue Directional Distance Function model","text":"The revenue directional distance function model is computed by solving a directional distance function DEA model for the technical efficiency.","category":"page"},{"location":"revenue/revenueddf/","page":"Revenue Directional Distance Function model","title":"Revenue Directional Distance Function model","text":"In this example we compute the revenue efficiency directional distance function measure under variable returns to scale:","category":"page"},{"location":"revenue/revenueddf/","page":"Revenue Directional Distance Function model","title":"Revenue Directional Distance Function model","text":"julia> X = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> Y = [7 7; 4 8; 8 4; 3 5; 3 3; 8 2; 6 4; 1.5 5];\n\njulia> P = [1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1];\n\njulia> revenueddf = dearevenueddf(X, Y, P, Gy = :Monetary)\nRevenue DDF DEA Model \nDMUs = 8; Inputs = 1; Outputs = 2\nOrientation = Output; Returns to Scale = VRS\nGy = Monetary\n─────────────────────────────────\n   Revenue  Technical  Allocative\n─────────────────────────────────\n1      0.0       0.0         0.0\n2      2.0       0.0         2.0\n3      2.0       0.0         2.0\n4      6.0       5.0         1.0\n5      8.0       8.0         0.0\n6      4.0       0.0         4.0\n7      4.0       3.0         1.0\n8      7.5       5.75        1.75\n─────────────────────────────────","category":"page"},{"location":"revenue/revenueddf/","page":"Revenue Directional Distance Function model","title":"Revenue Directional Distance Function model","text":"Estimated economic, technical and allocative efficiency scores are returned with the efficiency function:","category":"page"},{"location":"revenue/revenueddf/","page":"Revenue Directional Distance Function model","title":"Revenue Directional Distance Function model","text":"julia> efficiency(revenueddf, :Economic)\n8-element Vector{Float64}:\n 0.0\n 2.0\n 2.0\n 6.0\n 8.0\n 4.0\n 4.0\n 7.5\n\njulia> efficiency(revenueddf, :Technical)\n8-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n 5.0\n 8.0\n 0.0\n 3.0000000000000004\n 5.749999999999999\n\njulia> efficiency(revenueddf, :Allocative)\n8-element Vector{Float64}:\n 0.0\n 2.0\n 2.0\n 1.0\n 0.0\n 4.0\n 0.9999999999999996\n 1.7500000000000009","category":"page"},{"location":"revenue/revenueddf/#dearevenueddf-Function-Documentation","page":"Revenue Directional Distance Function model","title":"dearevenueddf Function Documentation","text":"","category":"section"},{"location":"revenue/revenueddf/","page":"Revenue Directional Distance Function model","title":"Revenue Directional Distance Function model","text":"dearevenueddf","category":"page"},{"location":"revenue/revenueddf/#BenchmarkingEconomicEfficiency.dearevenueddf","page":"Revenue Directional Distance Function model","title":"BenchmarkingEconomicEfficiency.dearevenueddf","text":"dearevenueddf(X, Y, P; Gy)\n\nCompute revenue efficiency using directional distance function data envelopment analysis for inputs X, outputs Y and price of outputs P.\n\nDirection specification:\n\nThe direction Gy can be one of the following symbols.\n\n:Ones: use ones.\n:Observed: use observed values.\n:Mean: use column means.\n:Monetary: use direction so that profit inefficiency is expressed in monetary values.\n\nAlternatively, a vector or matrix with the desired directions can be supplied.\n\nOptional Arguments\n\nrts=:VRS: chooses variable returns to scale. For constant returns to scale choose :CRS.\n\nExamples\n\njulia> X = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> Y = [7 7; 4 8; 8 4; 3 5; 3 3; 8 2; 6 4; 1.5 5];\n\njulia> P = [1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1];\n\njulia> dearevenueddf(X, Y, P, Gy = :Monetary)\nRevenue DDF DEA Model \nDMUs = 8; Inputs = 1; Outputs = 2\nOrientation = Output; Returns to Scale = VRS\nGy = Monetary\n─────────────────────────────────\n   Revenue  Technical  Allocative\n─────────────────────────────────\n1      0.0       0.0         0.0\n2      2.0       0.0         2.0\n3      2.0       0.0         2.0\n4      6.0       5.0         1.0\n5      8.0       8.0         0.0\n6      4.0       0.0         4.0\n7      4.0       3.0         1.0\n8      7.5       5.75        1.75\n─────────────────────────────────\n\n\n\n\n\n","category":"function"},{"location":"profit/profitholder/","page":"Profit Hölder model","title":"Profit Hölder model","text":"CurrentModule = BenchmarkingEconomicEfficiency\nDocTestSetup = quote\n    using BenchmarkingEconomicEfficiency\nend","category":"page"},{"location":"profit/profitholder/#Profit-Hölder-model","page":"Profit Hölder model","title":"Profit Hölder model","text":"","category":"section"},{"location":"profit/profitholder/","page":"Profit Hölder model","title":"Profit Hölder model","text":"The profit Hölder model is computed by solving a graph Hölder DEA model for the technical efficiency.","category":"page"},{"location":"profit/profitholder/","page":"Profit Hölder model","title":"Profit Hölder model","text":"In this example we compute the profit efficiency Hölder L1 measure under variable returns to scale:","category":"page"},{"location":"profit/profitholder/","page":"Profit Hölder model","title":"Profit Hölder model","text":"julia> X = [2; 4; 8; 12; 6; 14; 14; 9.412];\n\njulia> Y = [1; 5; 8; 9; 3; 7; 9; 2.353];\n\njulia> W = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> P = [2; 2; 2; 2; 2; 2; 2; 2];\n\njulia> profitholderl1 = deaprofitholder(X, Y, W, P, l = 1)\nProfit Hölder L1 DEA Model \nDMUs = 8; Inputs = 1; Outputs = 1\nReturns to Scale = VRS\n────────────────────────────────\n   Profit  Technical  Allocative\n────────────────────────────────\n1   4.0          0.0       4.0\n2   1.0          0.0       1.0\n3   0.0          0.0       0.0\n4   1.0          0.0       1.0\n5   4.0          3.0       1.0\n6   4.0          2.0       2.0\n7   2.0          0.0       2.0\n8   6.353        6.0       0.353\n────────────────────────────────","category":"page"},{"location":"profit/profitholder/","page":"Profit Hölder model","title":"Profit Hölder model","text":"Estimated economic, technical and allocative efficiency scores are returned with the efficiency function:","category":"page"},{"location":"profit/profitholder/","page":"Profit Hölder model","title":"Profit Hölder model","text":"julia> efficiency(profitholderl1, :Economic)\n8-element Vector{Float64}:\n 4.0\n 1.0\n 0.0\n 1.0\n 4.0\n 4.0\n 2.0\n 6.353","category":"page"},{"location":"profit/profitholder/","page":"Profit Hölder model","title":"Profit Hölder model","text":"julia> efficiency(profitholderl1, :Technical)\n8-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n 0.0\n 2.9999999999999996\n 2.000000000000001\n 0.0\n 6.0","category":"page"},{"location":"profit/profitholder/","page":"Profit Hölder model","title":"Profit Hölder model","text":"julia> efficiency(profitholderl1, :Allocative)\n8-element Vector{Float64}:\n 4.0\n 1.0\n 0.0\n 1.0\n 1.0000000000000004\n 1.9999999999999991\n 2.0\n 0.35299999999999976","category":"page"},{"location":"profit/profitholder/#deaprofitholder-Function-Documentation","page":"Profit Hölder model","title":"deaprofitholder Function Documentation","text":"","category":"section"},{"location":"profit/profitholder/","page":"Profit Hölder model","title":"Profit Hölder model","text":"deaprofitholder","category":"page"},{"location":"profit/profitholder/#BenchmarkingEconomicEfficiency.deaprofitholder","page":"Profit Hölder model","title":"BenchmarkingEconomicEfficiency.deaprofitholder","text":"deaprofitholder(X, Y, W, P; l)\n\nCompute profit efficiency using data envelopment analysis Hölder model for inputs X, outputs Y, price of inputs W, and price of outputs P.\n\nHölder norm l specification\n\n1.\n2.\nInf.\n\nOptional Arguments\n\nnames: a vector of strings with the names of the decision making units.\n\nExamples\n\njulia> X = [1 1; 1 1; 0.75 1.5; 0.5 2; 0.5 2; 2 2; 2.75 3.5; 1.375 1.75];\n\njulia> Y = [1 11; 5 3; 5 5; 2 9; 4 5; 4 2; 3 3; 4.5 3.5];\n\njulia> P = [2 1; 2 1; 2 1; 2 1; 2 1; 2 1; 2 1; 2 1];\n\njulia> W = [2 1; 2 1; 2 1; 2 1; 2 1; 2 1; 2 1; 2 1];\n\njulia> deaprofitholder(X, Y, W, P, l = 1)\nProfit Hölder L1 DEA Model \nDMUs = 8; Inputs = 2; Outputs = 2\nReturns to Scale = VRS\n───────────────────────────────────\n   Profit     Technical  Allocative\n───────────────────────────────────\n1     1.0   0.0                 1.0\n2     1.0  -1.44329e-15         1.0\n3     0.0   0.0                 0.0\n4     1.0   0.0                 1.0\n5     1.0   0.0                 1.0\n6     4.0   1.0                 3.0\n7     6.0   2.0                 4.0\n8     2.0   0.5                 1.5\n───────────────────────────────────\n\n\n\n\n\n","category":"function"},{"location":"cost/costholder/","page":"Cost Hölder model","title":"Cost Hölder model","text":"CurrentModule = BenchmarkingEconomicEfficiency\nDocTestSetup = quote\n    using BenchmarkingEconomicEfficiency\nend","category":"page"},{"location":"cost/costholder/#Cost-Hölder-model","page":"Cost Hölder model","title":"Cost Hölder model","text":"","category":"section"},{"location":"cost/costholder/","page":"Cost Hölder model","title":"Cost Hölder model","text":"The cost Hölder model is computed by solving am input Hölder distance function DEA model for the technical efficiency.","category":"page"},{"location":"cost/costholder/","page":"Cost Hölder model","title":"Cost Hölder model","text":"In this example we compute the Hölder L1 efficiency measure under variable returns to scale:","category":"page"},{"location":"cost/costholder/","page":"Cost Hölder model","title":"Cost Hölder model","text":"julia> X = [2 2; 1 4; 4 1; 4 3; 5 5; 6 1; 2 5; 1.6 8];\n\njulia> Y = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> W = [1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1];\n\njulia> costholderl1 = deacostholder(X, Y, W, l = 1)\nCost Hölder L1 DEA Model \nDMUs = 8; Inputs = 2; Outputs = 1\nOrientation = Input; Returns to Scale = VRS\n──────────────────────────────\n   Cost  Technical  Allocative\n──────────────────────────────\n1   0.0        0.0         0.0\n2   1.0        0.0         1.0\n3   1.0        0.0         1.0\n4   3.0        2.0         1.0\n5   6.0        4.0         2.0\n6   3.0        0.0         3.0\n7   3.0        1.0         2.0\n8   5.6        0.6         5.0\n──────────────────────────────","category":"page"},{"location":"cost/costholder/","page":"Cost Hölder model","title":"Cost Hölder model","text":"Estimated economic, technical and allocative efficiency scores are returned with the efficiency function:","category":"page"},{"location":"cost/costholder/","page":"Cost Hölder model","title":"Cost Hölder model","text":"julia> efficiency(costholderl1, :Economic)\n8-element Vector{Float64}:\n 0.0\n 1.0\n 1.0\n 3.0\n 6.0\n 3.0\n 3.0\n 5.6","category":"page"},{"location":"cost/costholder/","page":"Cost Hölder model","title":"Cost Hölder model","text":"julia> efficiency(costholderl1, :Technical)\n8-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n 2.0\n 4.0\n 0.0\n 1.0\n 0.6000000000000001","category":"page"},{"location":"cost/costholder/","page":"Cost Hölder model","title":"Cost Hölder model","text":"julia> efficiency(costholderl1, :Allocative)\n8-element Vector{Float64}:\n 0.0\n 1.0\n 1.0\n 1.0\n 2.0\n 3.0\n 2.0\n 5.0","category":"page"},{"location":"cost/costholder/#deacostholder-Function-Documentation","page":"Cost Hölder model","title":"deacostholder Function Documentation","text":"","category":"section"},{"location":"cost/costholder/","page":"Cost Hölder model","title":"Cost Hölder model","text":"deacostholder","category":"page"},{"location":"cost/costholder/#BenchmarkingEconomicEfficiency.deacostholder","page":"Cost Hölder model","title":"BenchmarkingEconomicEfficiency.deacostholder","text":"deacostholder(X, Y, W; l)\n\nCompute cost efficiency using data envelopment analysis for inputs X, outputs Y and price of inputs W.\n\nHölder norm l specification\n\n1.\n2.\nInf.\n\nOptional Arguments\n\nrts=:VRS: chooses variable returns to scale. For constant returns to scale choose :CRS.\nnames: a vector of strings with the names of the decision making units.\n\nExamples\n\njulia> X = [2 2; 1 4; 4 1; 4 3; 5 5; 6 1; 2 5; 1.6 8];\n\njulia> Y = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> W = [1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1];\n\njulia> deacostholder(X, Y, W, l = 1)\nCost Hölder L1 DEA Model \nDMUs = 8; Inputs = 2; Outputs = 1\nOrientation = Input; Returns to Scale = VRS\n──────────────────────────────\n   Cost  Technical  Allocative\n──────────────────────────────\n1   0.0        0.0         0.0\n2   1.0        0.0         1.0\n3   1.0        0.0         1.0\n4   3.0        2.0         1.0\n5   6.0        4.0         2.0\n6   3.0        0.0         3.0\n7   3.0        1.0         2.0\n8   5.6        0.6         5.0\n──────────────────────────────\n\n\n\n\n\n","category":"function"},{"location":"revenue/revenuerddf/","page":"Revenue Reverse Directional Distance Function model","title":"Revenue Reverse Directional Distance Function model","text":"CurrentModule = BenchmarkingEconomicEfficiency\nDocTestSetup = quote\n    using BenchmarkingEconomicEfficiency\nend","category":"page"},{"location":"revenue/revenuerddf/#Revenue-Reverse-Directional-Distance-Function-model","page":"Revenue Reverse Directional Distance Function model","title":"Revenue Reverse Directional Distance Function model","text":"","category":"section"},{"location":"revenue/revenuerddf/","page":"Revenue Reverse Directional Distance Function model","title":"Revenue Reverse Directional Distance Function model","text":"In this example we compute the revenue efficiency Reverse directional distance function measure for the Enhanced Russell Graph associated efficiency measure under variable returns to scale:","category":"page"},{"location":"revenue/revenuerddf/","page":"Revenue Reverse Directional Distance Function model","title":"Revenue Reverse Directional Distance Function model","text":"julia> X = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> Y = [7 7; 4 8; 8 4; 3 5; 3 3; 8 2; 6 4; 1.5 5];\n\njulia> P = [1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1];\n\njulia> revenuerddf = dearevenuerddf(X, Y, P, :ERG)\nRevenue Reverse DDF DEA Model \nDMUs = 8; Inputs = 1; Outputs = 2\nReturns to Scale: VRS\nAssociated efficiency measure = ERG\n────────────────────────────────────\n    Revenue  Technical    Allocative\n────────────────────────────────────\n1  0.0        0.0        0.0\n2  0.25       0.0        0.25\n3  0.25       0.0        0.25\n4  0.464286   0.464286   0.0\n5  0.571429   0.571429   0.0\n6  0.666667   0.333333   0.333333\n7  0.314286   0.314286  -5.55112e-17\n8  0.818182   0.672727   0.145455\n────────────────────────────────────","category":"page"},{"location":"revenue/revenuerddf/","page":"Revenue Reverse Directional Distance Function model","title":"Revenue Reverse Directional Distance Function model","text":"Estimated economic, technical and allocative efficiency scores are returned with the efficiency function:","category":"page"},{"location":"revenue/revenuerddf/","page":"Revenue Reverse Directional Distance Function model","title":"Revenue Reverse Directional Distance Function model","text":"julia> efficiency(revenuerddf, :Economic)\n8-element Vector{Float64}:\n 0.0\n 0.25\n 0.25\n 0.4642857142857143\n 0.5714285714285715\n 0.6666666666666667\n 0.3142857142857144\n 0.8181818181818182","category":"page"},{"location":"revenue/revenuerddf/","page":"Revenue Reverse Directional Distance Function model","title":"Revenue Reverse Directional Distance Function model","text":"julia> efficiency(revenuerddf, :Technical)\n8-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n 0.4642857142857143\n 0.5714285714285715\n 0.33333333333333337\n 0.31428571428571445\n 0.6727272727272727","category":"page"},{"location":"revenue/revenuerddf/","page":"Revenue Reverse Directional Distance Function model","title":"Revenue Reverse Directional Distance Function model","text":"julia> efficiency(revenuerddf, :Allocative)\n8-element Vector{Float64}:\n  0.0\n  0.25\n  0.25\n  0.0\n  0.0\n  0.33333333333333337\n -5.551115123125783e-17\n  0.1454545454545455","category":"page"},{"location":"revenue/revenuerddf/#dearevenuerddf-Function-Documentation","page":"Revenue Reverse Directional Distance Function model","title":"dearevenuerddf Function Documentation","text":"","category":"section"},{"location":"revenue/revenuerddf/","page":"Revenue Reverse Directional Distance Function model","title":"Revenue Reverse Directional Distance Function model","text":"dearevenuerddf","category":"page"},{"location":"revenue/revenuerddf/#BenchmarkingEconomicEfficiency.dearevenuerddf","page":"Revenue Reverse Directional Distance Function model","title":"BenchmarkingEconomicEfficiency.dearevenuerddf","text":"dearevenuerddf(X, Y, P, measure)\n\nCompute profit efficiency using data envelopment analysis Reverse DDF model for inputs X, outputs Y, price of outputs P, and efficiency measure.\n\nMeasure specification:\n\n:ERG: Enhanced Russell Graph Slack Based Measure.\n\nOptional Arguments\n\nrts=:VRS: choose between constant returns to scale :CRS or variable returns to scale :VRS.\natol=1e-6: tolerance for DMU to be considered efficient.\nnames: a vector of strings with the names of the decision making units.\n\nExamples\n\njulia> X = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> Y = [7 7; 4 8; 8 4; 3 5; 3 3; 8 2; 6 4; 1.5 5];\n\njulia> P = [1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1];\n\njulia> dearevenuerddf(X, Y, P, :ERG)\nRevenue Reverse DDF DEA Model \nDMUs = 8; Inputs = 1; Outputs = 2\nReturns to Scale: VRS\nAssociated efficiency measure = ERG\n────────────────────────────────────\n    Revenue  Technical    Allocative\n────────────────────────────────────\n1  0.0        0.0        0.0\n2  0.25       0.0        0.25\n3  0.25       0.0        0.25\n4  0.464286   0.464286   0.0\n5  0.571429   0.571429   0.0\n6  0.666667   0.333333   0.333333\n7  0.314286   0.314286  -5.55112e-17\n8  0.818182   0.672727   0.145455\n────────────────────────────────────\n\n\n\n\n\n","category":"function"},{"location":"profit/profitenhancedrussell/","page":"Profit Enhanced Russell Graph Slack Based Measure","title":"Profit Enhanced Russell Graph Slack Based Measure","text":"CurrentModule = BenchmarkingEconomicEfficiency\nDocTestSetup = quote\n    using BenchmarkingEconomicEfficiency\nend","category":"page"},{"location":"profit/profitenhancedrussell/#Profit-Enhanced-Russell-Graph-Slack-Based-Measure","page":"Profit Enhanced Russell Graph Slack Based Measure","title":"Profit Enhanced Russell Graph Slack Based Measure","text":"","category":"section"},{"location":"profit/profitenhancedrussell/","page":"Profit Enhanced Russell Graph Slack Based Measure","title":"Profit Enhanced Russell Graph Slack Based Measure","text":"The profit Enhanced Russell Graph Slack Based Measure is computed by solving an Enhanced Russell Graph Slack Based Measure model for the technical efficiency.","category":"page"},{"location":"profit/profitenhancedrussell/","page":"Profit Enhanced Russell Graph Slack Based Measure","title":"Profit Enhanced Russell Graph Slack Based Measure","text":"In this example we compute the profit efficiency Enhanced Russell Graph Slack Based measure under variable returns to scale:","category":"page"},{"location":"profit/profitenhancedrussell/","page":"Profit Enhanced Russell Graph Slack Based Measure","title":"Profit Enhanced Russell Graph Slack Based Measure","text":"julia> X = [2; 4; 8; 12; 6; 14; 14; 9.412];\n\njulia> Y = [1; 5; 8; 9; 3; 7; 9; 2.353];\n\njulia> W = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> P = [2; 2; 2; 2; 2; 2; 2; 2];\n\njulia> profiterg = deaprofiterg(X, Y, W, P)\nEnhanced Russell Graph Slack Based Measure DEA Model \nDMUs = 8; Inputs = 1; Outputs = 1\nReturns to Scale = VRS\n──────────────────────────────────\n     Profit  Technical  Allocative\n──────────────────────────────────\n1  4.0        0.0         4.0\n2  0.5        0.0         0.5\n3  0.0        0.0         0.0\n4  0.166667   0.0         0.166667\n5  0.8        0.6         0.2\n6  0.571429   0.52381     0.047619\n7  0.285714   0.142857    0.142857\n8  1.2706     0.8         0.4706\n──────────────────────────────────","category":"page"},{"location":"profit/profitenhancedrussell/","page":"Profit Enhanced Russell Graph Slack Based Measure","title":"Profit Enhanced Russell Graph Slack Based Measure","text":"Estimated economic, technical and allocative efficiency scores are returned with the efficiency function:","category":"page"},{"location":"profit/profitenhancedrussell/","page":"Profit Enhanced Russell Graph Slack Based Measure","title":"Profit Enhanced Russell Graph Slack Based Measure","text":"julia> efficiency(profiterg, :Economic)\n8-element Vector{Float64}:\n 4.0\n 0.5\n 0.0\n 0.16666666666666666\n 0.8\n 0.5714285714285714\n 0.2857142857142857\n 1.2705999999999997\n\njulia> efficiency(profiterg, :Technical)\n8-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n 0.0\n 0.6000000000000001\n 0.5238095238095238\n 0.14285714285714257\n 0.8\n\njulia> efficiency(profiterg, :Allocative)\n8-element Vector{Float64}:\n 4.0\n 0.5\n 0.0\n 0.16666666666666666\n 0.19999999999999996\n 0.04761904761904756\n 0.14285714285714313\n 0.4705999999999997","category":"page"},{"location":"profit/profitenhancedrussell/#deaprofiterg-Function-Documentation","page":"Profit Enhanced Russell Graph Slack Based Measure","title":"deaprofiterg Function Documentation","text":"","category":"section"},{"location":"profit/profitenhancedrussell/","page":"Profit Enhanced Russell Graph Slack Based Measure","title":"Profit Enhanced Russell Graph Slack Based Measure","text":"deaprofiterg","category":"page"},{"location":"profit/profitenhancedrussell/#BenchmarkingEconomicEfficiency.deaprofiterg","page":"Profit Enhanced Russell Graph Slack Based Measure","title":"BenchmarkingEconomicEfficiency.deaprofiterg","text":"deaprofiterg(X, Y, W, P)\n\nCompute profit efficiency using data envelopment analysis Enhanced Russell Graph Slack Based Measure model for inputs X, outputs Y, price of inputs W, and price of outputs P.\n\nOptional Arguments\n\nnames: a vector of strings with the names of the decision making units.\n\nExamples\n\njulia> X = [2; 4; 8; 12; 6; 14; 14; 9.412];\n\njulia> Y = [1; 5; 8; 9; 3; 7; 9; 2.353];\n\njulia> W = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> P = [2; 2; 2; 2; 2; 2; 2; 2];\n\njulia> deaprofiterg(X, Y, W, P)\nEnhanced Russell Graph Slack Based Measure DEA Model \nDMUs = 8; Inputs = 1; Outputs = 1\nReturns to Scale = VRS\n──────────────────────────────────\n     Profit  Technical  Allocative\n──────────────────────────────────\n1  4.0        0.0         4.0\n2  0.5        0.0         0.5\n3  0.0        0.0         0.0\n4  0.166667   0.0         0.166667\n5  0.8        0.6         0.2\n6  0.571429   0.52381     0.047619\n7  0.285714   0.142857    0.142857\n8  1.2706     0.8         0.4706\n──────────────────────────────────\n\n\n\n\n\n","category":"function"},{"location":"cost/costrussell/","page":"Cost Russell model","title":"Cost Russell model","text":"CurrentModule = BenchmarkingEconomicEfficiency\nDocTestSetup = quote\n    using BenchmarkingEconomicEfficiency\nend","category":"page"},{"location":"cost/costrussell/#Cost-Russell-model","page":"Cost Russell model","title":"Cost Russell model","text":"","category":"section"},{"location":"cost/costrussell/","page":"Cost Russell model","title":"Cost Russell model","text":"The cost Russell model is computed by solving am input Russell DEA model for the technical efficiency.","category":"page"},{"location":"cost/costrussell/","page":"Cost Russell model","title":"Cost Russell model","text":"In this example we compute the cost efficiency Russell measure under variable returns to scale:","category":"page"},{"location":"cost/costrussell/","page":"Cost Russell model","title":"Cost Russell model","text":"julia> X = [2 2; 1 4; 4 1; 4 3; 5 5; 6 1; 2 5; 1.6 8];\n\njulia> Y = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> W = [1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1];\n\njulia> costrussell = deacostrussell(X, Y, W)\nRussell Cost DEA Model \nDMUs = 8; Inputs = 2; Outputs = 1\nOrientation = Input; Returns to Scale = VRS\n──────────────────────────────\n   Cost  Technical  Allocative\n──────────────────────────────\n1  0.0    0.0        0.0\n2  0.5    0.0        0.5\n3  0.5    0.0        0.5\n4  0.5    0.416667   0.0833333\n5  0.6    0.6        0.0\n6  1.5    0.166667   1.33333\n7  0.75   0.35       0.4\n8  1.75   0.4375     1.3125\n──────────────────────────────","category":"page"},{"location":"cost/costrussell/","page":"Cost Russell model","title":"Cost Russell model","text":"Estimated economic, technical and allocative efficiency scores are returned with the efficiency function:","category":"page"},{"location":"cost/costrussell/","page":"Cost Russell model","title":"Cost Russell model","text":"julia> efficiency(costrussell, :Economic)\n8-element Vector{Float64}:\n 0.0\n 0.5\n 0.5\n 0.5\n 0.6\n 1.5\n 0.75\n 1.7499999999999998\n\njulia> efficiency(costrussell, :Technical)\n8-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n 0.41666666666666663\n 0.6\n 0.16666666666666663\n 0.35\n 0.4375\n\njulia> efficiency(costrussell, :Allocative)\n8-element Vector{Float64}:\n 0.0\n 0.5\n 0.5\n 0.08333333333333337\n 0.0\n 1.3333333333333335\n 0.4\n 1.3124999999999998","category":"page"},{"location":"cost/costrussell/#deacostrussell-Function-Documentation","page":"Cost Russell model","title":"deacostrussell Function Documentation","text":"","category":"section"},{"location":"cost/costrussell/","page":"Cost Russell model","title":"Cost Russell model","text":"deacostrussell","category":"page"},{"location":"cost/costrussell/#BenchmarkingEconomicEfficiency.deacostrussell","page":"Cost Russell model","title":"BenchmarkingEconomicEfficiency.deacostrussell","text":"deacostrussell(X, Y, W)\n\nCompute cost efficiency using Russell data envelopment analysis for inputs X, outputs Y and price of inputs W.\n\nOptional Arguments\n\nrts=:VRS: chooses variable returns to scale. For constant returns to scale choose :CRS.\nnames: a vector of strings with the names of the decision making units.\n\nExamples\n\njulia> X = [2 2; 1 4; 4 1; 4 3; 5 5; 6 1; 2 5; 1.6 8];\n\njulia> Y = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> W = [1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1];\n\njulia> deacostrussell(X, Y, W)\nRussell Cost DEA Model \nDMUs = 8; Inputs = 2; Outputs = 1\nOrientation = Input; Returns to Scale = VRS\n──────────────────────────────\n   Cost  Technical  Allocative\n──────────────────────────────\n1  0.0    0.0        0.0\n2  0.5    0.0        0.5\n3  0.5    0.0        0.5\n4  0.5    0.416667   0.0833333\n5  0.6    0.6        0.0\n6  1.5    0.166667   1.33333\n7  0.75   0.35       0.4\n8  1.75   0.4375     1.3125\n──────────────────────────────\n\n\n\n\n\n","category":"function"},{"location":"cost/costrddf/","page":"Cost Reverse Directional Distance Function model","title":"Cost Reverse Directional Distance Function model","text":"CurrentModule = BenchmarkingEconomicEfficiency\nDocTestSetup = quote\n    using BenchmarkingEconomicEfficiency\nend","category":"page"},{"location":"cost/costrddf/#Cost-Reverse-Directional-Distance-Function-model","page":"Cost Reverse Directional Distance Function model","title":"Cost Reverse Directional Distance Function model","text":"","category":"section"},{"location":"cost/costrddf/","page":"Cost Reverse Directional Distance Function model","title":"Cost Reverse Directional Distance Function model","text":"In this example we compute the cost efficiency Reverse directional distance function measure for the Enhanced Russell Graph associated efficiency measure under variable returns to scale:","category":"page"},{"location":"cost/costrddf/","page":"Cost Reverse Directional Distance Function model","title":"Cost Reverse Directional Distance Function model","text":"julia> X = [2 2; 1 4; 4 1; 4 3; 5 5; 6 1; 2 5; 1.6 8];\n\njulia> Y = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> W = [1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1];\n\njulia> costrddf = deacostrddf(X, Y, W, :ERG)\nCost Reverse DDF DEA Model \nDMUs = 8; Inputs = 2; Outputs = 1\nReturns to Scale: VRS\nAssociated efficiency measure = ERG\n──────────────────────────────────\n       Cost  Technical  Allocative\n──────────────────────────────────\n1  0.0        0.0        0.0\n2  0.5        0.0        0.5\n3  0.5        0.0        0.5\n4  0.416667   0.416667   0.0\n5  0.6        0.6        0.0\n6  0.25       0.166667   0.0833333\n7  0.525      0.35       0.175\n8  0.532609   0.4375     0.0951087\n──────────────────────────────────","category":"page"},{"location":"cost/costrddf/","page":"Cost Reverse Directional Distance Function model","title":"Cost Reverse Directional Distance Function model","text":"Estimated economic, technical and allocative efficiency scores are returned with the efficiency function:","category":"page"},{"location":"cost/costrddf/","page":"Cost Reverse Directional Distance Function model","title":"Cost Reverse Directional Distance Function model","text":"julia> efficiency(costrddf, :Economic)\n8-element Vector{Float64}:\n 0.0\n 0.5\n 0.5\n 0.41666666666666663\n 0.6\n 0.24999999999999992\n 0.525\n 0.5326086956521738","category":"page"},{"location":"cost/costrddf/","page":"Cost Reverse Directional Distance Function model","title":"Cost Reverse Directional Distance Function model","text":"julia> efficiency(costrddf, :Technical)\n8-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n 0.41666666666666663\n 0.6\n 0.16666666666666663\n 0.35\n 0.43750000000000017","category":"page"},{"location":"cost/costrddf/","page":"Cost Reverse Directional Distance Function model","title":"Cost Reverse Directional Distance Function model","text":"julia> efficiency(costrddf, :Allocative)\n8-element Vector{Float64}:\n 0.0\n 0.5\n 0.5\n 0.0\n 0.0\n 0.08333333333333329\n 0.17500000000000004\n 0.09510869565217367","category":"page"},{"location":"cost/costrddf/#deacostrddf-Function-Documentation","page":"Cost Reverse Directional Distance Function model","title":"deacostrddf Function Documentation","text":"","category":"section"},{"location":"cost/costrddf/","page":"Cost Reverse Directional Distance Function model","title":"Cost Reverse Directional Distance Function model","text":"deacostrddf","category":"page"},{"location":"cost/costrddf/#BenchmarkingEconomicEfficiency.deacostrddf","page":"Cost Reverse Directional Distance Function model","title":"BenchmarkingEconomicEfficiency.deacostrddf","text":"deacostrddf(X, Y, W, measure)\n\nCompute profit efficiency using data envelopment analysis Reverse DDF model for inputs X, outputs Y, price of inputs W, and efficiency measure.\n\nMeasure specification:\n\n:ERG: Enhanced Russell Graph Slack Based Measure.\n\nOptional Arguments\n\nrts=:VRS: choose between constant returns to scale :CRS or variable returns to scale :VRS.\natol=1e-6: tolerance for DMU to be considered efficient.\nnames: a vector of strings with the names of the decision making units.\n\nExamples\n\njulia> X = [2 2; 1 4; 4 1; 4 3; 5 5; 6 1; 2 5; 1.6 8];\n\njulia> Y = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> W = [1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1];\n\njulia> deacostrddf(X, Y, W, :ERG)\nCost Reverse DDF DEA Model \nDMUs = 8; Inputs = 2; Outputs = 1\nReturns to Scale: VRS\nAssociated efficiency measure = ERG\n──────────────────────────────────\n       Cost  Technical  Allocative\n──────────────────────────────────\n1  0.0        0.0        0.0\n2  0.5        0.0        0.5\n3  0.5        0.0        0.5\n4  0.416667   0.416667   0.0\n5  0.6        0.6        0.0\n6  0.25       0.166667   0.0833333\n7  0.525      0.35       0.175\n8  0.532609   0.4375     0.0951087\n──────────────────────────────────\n\n\n\n\n\n","category":"function"},{"location":"optimizer/#Configuring-the-optimizer","page":"Configuring Optimizer","title":"Configuring the optimizer","text":"","category":"section"},{"location":"optimizer/","page":"Configuring Optimizer","title":"Configuring Optimizer","text":"BenchmarkingEconomicEfficiency.jl will use a default optimizer/solver for each DEA model, as shown in the next table.","category":"page"},{"location":"optimizer/","page":"Configuring Optimizer","title":"Configuring Optimizer","text":"Function Specific Options Problem type Default Optimizer\ndeacostadd  LP GLPK\ndeacostddf  LP GLPK\ndeacostrussell  LP GLPK\ndeacostholder  LP GLPK\ndeacostrddf  LP GLPK\ndeacostgda  LP GLPK\ndearevenueddf  LP GLPK\ndearevenueadd  LP GLPK\ndearevenuerussell  LP GLPK\ndearevenueholder  LP GLPK\ndearevenuerddf  LP GLPK\ndeaprofitadd  LP GLPK\ndeaprofitrussell  NLP Ipopt\ndeaprofiterg  LP GLPK\ndeaprofitmddf  NLP Ipopt\ndeaprofitholder  LP GLPK\ndeaprofitrddf :ERG LP GLPK\ndeaprofitrddf :MDDF NLP Ipopt","category":"page"},{"location":"optimizer/","page":"Configuring Optimizer","title":"Configuring Optimizer","text":"Where:","category":"page"},{"location":"optimizer/","page":"Configuring Optimizer","title":"Configuring Optimizer","text":"LP = Linear programming.\nNLP = Nonlinear programming.","category":"page"},{"location":"optimizer/","page":"Configuring Optimizer","title":"Configuring Optimizer","text":"Models can be solved using a different optimizer by passing a DEAOptimizer object to the optimizer optional argument. For instruction, see the documentation on the DataEnvelopmentAnalysis package.","category":"page"},{"location":"profit/profitrddf/","page":"Profit Reverse Directional Distance Function model","title":"Profit Reverse Directional Distance Function model","text":"CurrentModule = BenchmarkingEconomicEfficiency\nDocTestSetup = quote\n    using BenchmarkingEconomicEfficiency\nend","category":"page"},{"location":"profit/profitrddf/#Profit-Reverse-Directional-Distance-Function-model","page":"Profit Reverse Directional Distance Function model","title":"Profit Reverse Directional Distance Function model","text":"","category":"section"},{"location":"profit/profitrddf/","page":"Profit Reverse Directional Distance Function model","title":"Profit Reverse Directional Distance Function model","text":"In this example we compute the profit efficiency Reverse directional distance function measure for the Enhanced Russell Graph associated efficiency measure under variable returns to scale:","category":"page"},{"location":"profit/profitrddf/","page":"Profit Reverse Directional Distance Function model","title":"Profit Reverse Directional Distance Function model","text":"julia> X = [2; 4; 8; 12; 6; 14; 14; 9.412];\n\njulia> Y = [1; 5; 8; 9; 3; 7; 9; 2.353];\n\njulia> W = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> P = [2; 2; 2; 2; 2; 2; 2; 2];\n\njulia> profitrddf = deaprofitrddf(X, Y, W, P, :ERG)\nProfit Reverse DDF DEA Model \nDMUs = 8; Inputs = 1; Outputs = 1\nReturns to Scale = VRS\nAssociated efficiency measure = ERG\n──────────────────────────────────\n     Profit  Technical  Allocative\n──────────────────────────────────\n1  4.0        0.0         4.0\n2  0.5        0.0         0.5\n3  0.0        0.0         0.0\n4  0.166667   0.0         0.166667\n5  0.8        0.6         0.2\n6  0.571429   0.52381     0.047619\n7  0.285714   0.142857    0.142857\n8  0.949449   0.8         0.149449\n──────────────────────────────────","category":"page"},{"location":"profit/profitrddf/","page":"Profit Reverse Directional Distance Function model","title":"Profit Reverse Directional Distance Function model","text":"Estimated economic, technical and allocative efficiency scores are returned with the efficiency function:","category":"page"},{"location":"profit/profitrddf/","page":"Profit Reverse Directional Distance Function model","title":"Profit Reverse Directional Distance Function model","text":"julia> efficiency(profitrddf, :Economic)\n8-element Vector{Float64}:\n 4.0\n 0.5\n 0.0\n 0.16666666666666666\n 0.8\n 0.5714285714285715\n 0.2857142857142859\n 0.9494489071548664","category":"page"},{"location":"profit/profitrddf/","page":"Profit Reverse Directional Distance Function model","title":"Profit Reverse Directional Distance Function model","text":"julia> efficiency(profitrddf, :Technical)\n8-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n 0.0\n 0.6000000000000002\n 0.523809523809524\n 0.14285714285714296\n 0.8","category":"page"},{"location":"profit/profitrddf/","page":"Profit Reverse Directional Distance Function model","title":"Profit Reverse Directional Distance Function model","text":"julia> efficiency(profitrddf, :Allocative)\n8-element Vector{Float64}:\n 4.0\n 0.5\n 0.0\n 0.16666666666666666\n 0.19999999999999984\n 0.04761904761904756\n 0.14285714285714296\n 0.14944890715486636","category":"page"},{"location":"profit/profitrddf/#deaprofitrddf-Function-Documentation","page":"Profit Reverse Directional Distance Function model","title":"deaprofitrddf Function Documentation","text":"","category":"section"},{"location":"profit/profitrddf/","page":"Profit Reverse Directional Distance Function model","title":"Profit Reverse Directional Distance Function model","text":"deaprofitrddf","category":"page"},{"location":"profit/profitrddf/#BenchmarkingEconomicEfficiency.deaprofitrddf","page":"Profit Reverse Directional Distance Function model","title":"BenchmarkingEconomicEfficiency.deaprofitrddf","text":"deaprofitrddf(X, Y, W, P, measure)\n\nCompute profit efficiency using data envelopment analysis Reverse DDF model for inputs X, outputs Y, price of inputs W, price of outputs P, and efficiency measure.\n\nMeasure specification:\n\n:ERG: Enhanced Russell Graph Slack Based Measure.\n:MDDF: Modified Directional Distance Function.\n\nDirection specification:\n\nFor the Modified Directional Distance Function, the directions Gx and Gy can be one of the following symbols.\n\n:Ones: use ones.\n:Observed: use observed values.\n:Mean: use column means.\n\nAlternatively, a vector or matrix with the desired directions can be supplied.\n\nOptional Arguments\n\natol=1e-6: tolerance for DMU to be considered efficient.\nnames: a vector of strings with the names of the decision making units.\n\nExamples\n\njulia> X = [2; 4; 8; 12; 6; 14; 14; 9.412];\n\njulia> Y = [1; 5; 8; 9; 3; 7; 9; 2.353];\n\njulia> W = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> P = [2; 2; 2; 2; 2; 2; 2; 2];\n\njulia> deaprofitrddf(X, Y, W, P, :ERG)\nProfit Reverse DDF DEA Model \nDMUs = 8; Inputs = 1; Outputs = 1\nReturns to Scale = VRS\nAssociated efficiency measure = ERG\n──────────────────────────────────\n     Profit  Technical  Allocative\n──────────────────────────────────\n1  4.0        0.0         4.0\n2  0.5        0.0         0.5\n3  0.0        0.0         0.0\n4  0.166667   0.0         0.166667\n5  0.8        0.6         0.2\n6  0.571429   0.52381     0.047619\n7  0.285714   0.142857    0.142857\n8  0.949449   0.8         0.149449\n──────────────────────────────────\n\n\n\n\n\n","category":"function"},{"location":"revenue/revenueadditive/","page":"Revenue Additive model","title":"Revenue Additive model","text":"CurrentModule = BenchmarkingEconomicEfficiency\nDocTestSetup = quote\n    using BenchmarkingEconomicEfficiency\nend","category":"page"},{"location":"revenue/revenueadditive/#Revenue-Additive-model","page":"Revenue Additive model","title":"Revenue Additive model","text":"","category":"section"},{"location":"revenue/revenueadditive/","page":"Revenue Additive model","title":"Revenue Additive model","text":"The revenue additive model is computed by solving an additive DEA model for the technical efficiency.","category":"page"},{"location":"revenue/revenueadditive/","page":"Revenue Additive model","title":"Revenue Additive model","text":"In this example we compute the revenue efficiency additive measure under variable returns to scale:","category":"page"},{"location":"revenue/revenueadditive/","page":"Revenue Additive model","title":"Revenue Additive model","text":"julia> X = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> Y = [7 7; 4 8; 8 4; 3 5; 3 3; 8 2; 6 4; 1.5 5];\n\njulia> P = [1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1];\n\njulia> revenueadd = dearevenueadd(X, Y, P, :Ones)\nRevenue Additive DEA Model \nDMUs = 8; Inputs = 1; Outputs = 2\nOrientation = Output; Returns to Scale = VRS\nWeights = Ones\n───────────────────────────────────\n   Revenue  Technical    Allocative\n───────────────────────────────────\n1      0.0        0.0   0.0\n2      2.0        0.0   2.0\n3      2.0        0.0   2.0\n4      6.0        6.0   0.0\n5      8.0        8.0   0.0\n6      4.0        2.0   2.0\n7      4.0        4.0  -8.88178e-16\n8      7.5        7.5   0.0\n───────────────────────────────────","category":"page"},{"location":"revenue/revenueadditive/","page":"Revenue Additive model","title":"Revenue Additive model","text":"Estimated economic, technical and allocative efficiency scores are returned with the efficiency function:","category":"page"},{"location":"revenue/revenueadditive/","page":"Revenue Additive model","title":"Revenue Additive model","text":"julia> efficiency(revenueadd, :Economic)\n8-element Vector{Float64}:\n 0.0\n 2.0\n 2.0\n 6.0\n 8.0\n 4.0\n 4.0\n 7.5\n\njulia> efficiency(revenueadd, :Technical)\n8-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n 6.0\n 8.0\n 2.0000000000000004\n 4.000000000000001\n 7.5\n\njulia> efficiency(revenueadd, :Allocative)\n8-element Vector{Float64}:\n  0.0\n  2.0\n  2.0\n  0.0\n  0.0\n  1.9999999999999996\n -8.881784197001252e-16\n  0.0","category":"page"},{"location":"revenue/revenueadditive/#dearevenueadd-Function-Documentation","page":"Revenue Additive model","title":"dearevenueadd Function Documentation","text":"","category":"section"},{"location":"revenue/revenueadditive/","page":"Revenue Additive model","title":"Revenue Additive model","text":"dearevenueadd","category":"page"},{"location":"revenue/revenueadditive/#BenchmarkingEconomicEfficiency.dearevenueadd","page":"Revenue Additive model","title":"BenchmarkingEconomicEfficiency.dearevenueadd","text":"dearevenueadd(X, Y, P, model)\n\nCompute revenue efficiency using additive data envelopment analysis for inputs X, outputs Y and price of outputs P.\n\nModel specification:\n\n:Ones: standard additive DEA model.\n:MIP: Measure of Inefficiency Proportions. (Charnes et al., 1987; Cooper et al., 1999)\n:Normalized: Normalized weighted additive DEA model. (Lovell and Pastor, 1995)\n:RAM: Range Adjusted Measure. (Cooper et al., 1999)\n:BAM: Bounded Adjusted Measure. (Cooper et al, 2011)\n:Custom: User supplied weights.\n\nOptional Arguments\n\nrts=:VRS: chooses variable returns to scale. For constant returns to scale choose :CRS.\nrhoY: matrix of weights of outputs. Only if model=:Custom.\ndisposal=:Strong: chooses strong disposal of inputs. For weak disposal choose :Weak.\nnames: a vector of strings with the names of the decision making units.\n\nExamples\n\njulia> X = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> Y = [7 7; 4 8; 8 4; 3 5; 3 3; 8 2; 6 4; 1.5 5];\n\njulia> P = [1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1];\n\njulia> dearevenueadd(X, Y, P, :Ones)\nRevenue Additive DEA Model \nDMUs = 8; Inputs = 1; Outputs = 2\nOrientation = Output; Returns to Scale = VRS\nWeights = Ones\n───────────────────────────────────\n   Revenue  Technical    Allocative\n───────────────────────────────────\n1      0.0        0.0   0.0\n2      2.0        0.0   2.0\n3      2.0        0.0   2.0\n4      6.0        6.0   0.0\n5      8.0        8.0   0.0\n6      4.0        2.0   2.0\n7      4.0        4.0  -8.88178e-16\n8      7.5        7.5   0.0\n───────────────────────────────────\n\n\n\n\n\n\n","category":"function"},{"location":"profit/profitmodifiedddf/","page":"Profit Modified Directional Distance Function model","title":"Profit Modified Directional Distance Function model","text":"CurrentModule = BenchmarkingEconomicEfficiency\nDocTestSetup = quote\n    using BenchmarkingEconomicEfficiency\n    deaprofitmddf([1; 2; 3], [1; 1; 2], [1; 1; 1], [1; 1;1], Gx = :Observed, Gy = :Observed)\nend","category":"page"},{"location":"profit/profitmodifiedddf/#Profit-Modified-Directional-Distance-Function-model","page":"Profit Modified Directional Distance Function model","title":"Profit Modified Directional Distance Function model","text":"","category":"section"},{"location":"profit/profitmodifiedddf/","page":"Profit Modified Directional Distance Function model","title":"Profit Modified Directional Distance Function model","text":"The profit Modified Directional Distance Function is computed by solving a Modified Directional Distance Function model for the technical efficiency.","category":"page"},{"location":"profit/profitmodifiedddf/","page":"Profit Modified Directional Distance Function model","title":"Profit Modified Directional Distance Function model","text":"In this example we compute the profit Modified Directional Distance Function measure under variable returns to scale:","category":"page"},{"location":"profit/profitmodifiedddf/","page":"Profit Modified Directional Distance Function model","title":"Profit Modified Directional Distance Function model","text":"julia> X = [2; 4; 8; 12; 6; 14; 14; 9.412];\n\njulia> Y = [1; 5; 8; 9; 3; 7; 9; 2.353];\n\njulia> W = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> P = [2; 2; 2; 2; 2; 2; 2; 2];\n\njulia> profitmddf = deaprofitmddf(X, Y, W, P, Gx = :Observed, Gy = :Observed)\nProfit Modified DDF DEA Model \nDMUs = 8; Inputs = 1; Outputs = 1\nReturns to Scale = VRS\nGx = Observed; Gy = Observed\n─────────────────────────────────────\n       Profit   Technical  Allocative\n─────────────────────────────────────\n1  4.0         7.623e-7    4.0\n2  0.5         8.28765e-8  0.5\n3  5.68126e-8  4.78858e-8  8.92688e-9\n4  0.166667    1.08205e-7  0.166667\n5  1.33333     1.16667     0.166667\n6  0.571429    0.571429    3.2471e-9\n7  0.285714    0.142857    0.142857\n8  2.69996     2.54994     0.150021\n─────────────────────────────────────","category":"page"},{"location":"profit/profitmodifiedddf/","page":"Profit Modified Directional Distance Function model","title":"Profit Modified Directional Distance Function model","text":"Estimated economic, technical and allocative efficiency scores are returned with the efficiency function:","category":"page"},{"location":"profit/profitmodifiedddf/","page":"Profit Modified Directional Distance Function model","title":"Profit Modified Directional Distance Function model","text":"julia> efficiency(profitmddf, :Economic)\n8-element Vector{Float64}:\n 4.000000227250586\n 0.5000001136252932\n 5.6812646587189874e-8\n 0.16666670454176438\n 1.3333334090835287\n 0.5714286038929409\n 0.28571431817865517\n 2.699957597641558","category":"page"},{"location":"profit/profitmodifiedddf/","page":"Profit Modified Directional Distance Function model","title":"Profit Modified Directional Distance Function model","text":"julia> efficiency(profitmddf, :Technical)\n8-element Vector{Float64}:\n 7.62299821585534e-7\n 8.287654900253467e-8\n 4.7885770009027296e-8\n 1.0820468712138814e-7\n 1.1666667530819783\n 0.5714286006458399\n 0.14285723362224123\n 2.549936340615896","category":"page"},{"location":"profit/profitmodifiedddf/","page":"Profit Modified Directional Distance Function model","title":"Profit Modified Directional Distance Function model","text":"julia> efficiency(profitmddf, :Allocative)\n8-element Vector{Float64}:\n 3.999999464950765\n 0.5000000307487442\n 8.926876578162579e-9\n 0.16666659633707726\n 0.1666666560015504\n 3.2471010324996996e-9\n 0.14285708455641394\n 0.15002125702566182","category":"page"},{"location":"profit/profitmodifiedddf/#deaprofitmddf-Function-Documentation","page":"Profit Modified Directional Distance Function model","title":"deaprofitmddf Function Documentation","text":"","category":"section"},{"location":"profit/profitmodifiedddf/","page":"Profit Modified Directional Distance Function model","title":"Profit Modified Directional Distance Function model","text":"deaprofitmddf","category":"page"},{"location":"profit/profitmodifiedddf/#BenchmarkingEconomicEfficiency.deaprofitmddf","page":"Profit Modified Directional Distance Function model","title":"BenchmarkingEconomicEfficiency.deaprofitmddf","text":"deaprofitmddf(X, Y, W, P; Gx, Gy)\n\nCompute profit efficiency using Modified DDF data envelopment analysis model for inputs X, outputs Y, price of inputs W, and price of outputs P.\n\nDirection specification:\n\nThe directions Gx and Gy can be one of the following symbols.\n\n:Ones: use ones.\n:Observed: use observed values.\n:Mean: use column means.\n\nAlternatively, a vector or matrix with the desired directions can be supplied.\n\nOptional Arguments\n\nnames: a vector of strings with the names of the decision making units.\n\nExamples\n\njulia> X = [2; 4; 8; 12; 6; 14; 14; 9.412];\n\njulia> Y = [1; 5; 8; 9; 3; 7; 9; 2.353];\n\njulia> W = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> P = [2; 2; 2; 2; 2; 2; 2; 2];\n\njulia> deaprofitmddf(X, Y, W, P, Gx = :Observed, Gy = :Observed)\nProfit Modified DDF DEA Model \nDMUs = 8; Inputs = 1; Outputs = 1\nReturns to Scale = VRS\nGx = Observed; Gy = Observed\n─────────────────────────────────────\n       Profit   Technical  Allocative\n─────────────────────────────────────\n1  4.0         7.623e-7    4.0\n2  0.5         8.28765e-8  0.5\n3  5.68126e-8  4.78858e-8  8.92688e-9\n4  0.166667    1.08205e-7  0.166667\n5  1.33333     1.16667     0.166667\n6  0.571429    0.571429    3.2471e-9\n7  0.285714    0.142857    0.142857\n8  2.69996     2.54994     0.150021\n─────────────────────────────────────\n\n\n\n\n\n","category":"function"},{"location":"profit/profitadditive/","page":"Profit Additive model","title":"Profit Additive model","text":"CurrentModule = BenchmarkingEconomicEfficiency\nDocTestSetup = quote\n    using BenchmarkingEconomicEfficiency\nend","category":"page"},{"location":"profit/profitadditive/#Profit-Additive-model","page":"Profit Additive model","title":"Profit Additive model","text":"","category":"section"},{"location":"profit/profitadditive/","page":"Profit Additive model","title":"Profit Additive model","text":"The profit additive model is computed by solving an additive DEA model for the technical efficiency.","category":"page"},{"location":"profit/profitadditive/","page":"Profit Additive model","title":"Profit Additive model","text":"In this example we compute the profit efficiency additive measure under variable returns to scale:","category":"page"},{"location":"profit/profitadditive/","page":"Profit Additive model","title":"Profit Additive model","text":"julia> X = [2; 4; 8; 12; 6; 14; 14; 9.412];\n\njulia> Y = [1; 5; 8; 9; 3; 7; 9; 2.353];\n\njulia> W = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> P = [2; 2; 2; 2; 2; 2; 2; 2];\n\njulia> profitadd = deaprofitadd(X, Y, W, P, :Ones)\nProfit Additive DEA Model \nDMUs = 8; Inputs = 1; Outputs = 1\nWeights = Ones; Returns to Scale = VRS\n────────────────────────────────\n   Profit  Technical  Allocative\n────────────────────────────────\n1   8.0      0.0        8.0\n2   2.0      0.0        2.0\n3   0.0      0.0        0.0\n4   2.0      0.0        2.0\n5   8.0      4.0        4.0\n6   8.0      7.33333    0.666667\n7   4.0      2.0        2.0\n8  12.706    8.059      4.647\n────────────────────────────────","category":"page"},{"location":"profit/profitadditive/","page":"Profit Additive model","title":"Profit Additive model","text":"Estimated economic, technical and allocative efficiency scores are returned with the efficiency function:","category":"page"},{"location":"profit/profitadditive/","page":"Profit Additive model","title":"Profit Additive model","text":"julia> efficiency(profitadd, :Economic)\n8-element Vector{Float64}:\n  8.0\n  2.0\n  0.0\n  2.0\n  8.0\n  8.0\n  4.0\n 12.706\n\njulia> efficiency(profitadd, :Technical)\n8-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n 0.0\n 3.999999999999999\n 7.333333333333333\n 1.9999999999999944\n 8.059000000000001\n\njulia> efficiency(profitadd, :Allocative)\n8-element Vector{Float64}:\n 8.0\n 2.0\n 0.0\n 2.0\n 4.000000000000001\n 0.666666666666667\n 2.0000000000000053\n 4.6469999999999985","category":"page"},{"location":"profit/profitadditive/#deaprofitadd-Function-Documentation","page":"Profit Additive model","title":"deaprofitadd Function Documentation","text":"","category":"section"},{"location":"profit/profitadditive/","page":"Profit Additive model","title":"Profit Additive model","text":"deaprofitadd","category":"page"},{"location":"profit/profitadditive/#BenchmarkingEconomicEfficiency.deaprofitadd","page":"Profit Additive model","title":"BenchmarkingEconomicEfficiency.deaprofitadd","text":"deaprofitadd(X, Y, W, P, model)\n\nCompute profit efficiency using data envelopment analysis weighted additive model for inputs X, outputs Y, price of inputs W, and price of outputs P.\n\nModel specification:\n\n:Ones: standard additive DEA model.\n:MIP: Measure of Inefficiency Proportions. (Charnes et al., 1987; Cooper et al., 1999)\n:Normalized: Normalized weighted additive DEA model. (Lovell and Pastor, 1995)\n:RAM: Range Adjusted Measure. (Cooper et al., 1999)\n:BAM: Bounded Adjusted Measure. (Cooper et al, 2011)\n:Custom: User supplied weights.\n\nOptional Arguments\n\nrhoX: matrix of weights of inputs. Only if model=:Custom.\nrhoY: matrix of weights of outputs. Only if model=:Custom.\nnames: a vector of strings with the names of the decision making units.\n\nExamples\n\njulia> X = [2; 4; 8; 12; 6; 14; 14; 9.412];\n\njulia> Y = [1; 5; 8; 9; 3; 7; 9; 2.353];\n\njulia> W = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> P = [2; 2; 2; 2; 2; 2; 2; 2];\n\njulia> deaprofitadd(X, Y, W, P, :Ones)\nProfit Additive DEA Model \nDMUs = 8; Inputs = 1; Outputs = 1\nWeights = Ones; Returns to Scale = VRS\n────────────────────────────────\n   Profit  Technical  Allocative\n────────────────────────────────\n1   8.0      0.0        8.0\n2   2.0      0.0        2.0\n3   0.0      0.0        0.0\n4   2.0      0.0        2.0\n5   8.0      4.0        4.0\n6   8.0      7.33333    0.666667\n7   4.0      2.0        2.0\n8  12.706    8.059      4.647\n────────────────────────────────\n\n\n\n\n\n","category":"function"},{"location":"profit/profitrussell/","page":"Profit Russell model","title":"Profit Russell model","text":"CurrentModule = BenchmarkingEconomicEfficiency\nDocTestSetup = quote\n    using BenchmarkingEconomicEfficiency\n    deaprofitrussell([1; 2; 3], [1; 1; 2], [1; 1; 1], [1; 1;1])\nend","category":"page"},{"location":"profit/profitrussell/#Profit-Russell-model","page":"Profit Russell model","title":"Profit Russell model","text":"","category":"section"},{"location":"profit/profitrussell/","page":"Profit Russell model","title":"Profit Russell model","text":"The profit Russell model is computed by solving a graph Russell DEA model for the technical efficiency.","category":"page"},{"location":"profit/profitrussell/","page":"Profit Russell model","title":"Profit Russell model","text":"In this example we compute the profit efficiency Russell measure under variable returns to scale:","category":"page"},{"location":"profit/profitrussell/","page":"Profit Russell model","title":"Profit Russell model","text":"julia> X = [2; 4; 8; 12; 6; 14; 14; 9.412];\n\njulia> Y = [1; 5; 8; 9; 3; 7; 9; 2.353];\n\njulia> W = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> P = [2; 2; 2; 2; 2; 2; 2; 2];\n\njulia> profitrussell = deaprofitrussell(X, Y, W, P)\nRussell Profit DEA Model \nDMUs = 8; Inputs = 1; Outputs = 1\nOrientation = Graph; Returns to Scale = VRS\n─────────────────────────────────────\n       Profit   Technical  Allocative\n─────────────────────────────────────\n1  2.0         3.50173e-7  2.0\n2  0.25        2.49141e-8  0.25\n3  2.84063e-8  8.48991e-9  1.99164e-8\n4  0.0833334   2.9862e-8   0.0833333\n5  0.666667    0.366667    0.3\n6  0.285714    0.276786    0.0089286\n7  0.142857    0.0714286   0.0714286\n8  1.34998     0.552205    0.797773\n─────────────────────────────────────","category":"page"},{"location":"profit/profitrussell/","page":"Profit Russell model","title":"Profit Russell model","text":"Estimated economic, technical and allocative efficiency scores are returned with the efficiency function:","category":"page"},{"location":"profit/profitrussell/","page":"Profit Russell model","title":"Profit Russell model","text":"julia> efficiency(profitrussell, :Economic)\n8-element Vector{Float64}:\n 2.000000113625293\n 0.2500000568126466\n 2.8406323293594937e-8\n 0.08333335227088219\n 0.6666667045417644\n 0.28571430194647046\n 0.14285715908932758\n 1.349978798820779","category":"page"},{"location":"profit/profitrussell/","page":"Profit Russell model","title":"Profit Russell model","text":"julia> efficiency(profitrussell, :Technical)\n8-element Vector{Float64}:\n 3.5017295285655337e-7\n 2.4914090124283916e-8\n 8.48991321689141e-9\n 2.9861977113299076e-8\n 0.36666667736489755\n 0.2767857062834501\n 0.07142859511479327\n 0.5522053118262116","category":"page"},{"location":"profit/profitrussell/","page":"Profit Russell model","title":"Profit Russell model","text":"julia> efficiency(profitrussell, :Allocative)\n8-element Vector{Float64}:\n 1.9999997634523403\n 0.25000003189855646\n 1.9916410076703528e-8\n 0.08333332240890508\n 0.3000000271768668\n 0.008928595663020344\n 0.07142856397453431\n 0.7977734869945674","category":"page"},{"location":"profit/profitrussell/#deaprofitrussell-Function-Documentation","page":"Profit Russell model","title":"deaprofitrussell Function Documentation","text":"","category":"section"},{"location":"profit/profitrussell/","page":"Profit Russell model","title":"Profit Russell model","text":"deaprofitrussell","category":"page"},{"location":"profit/profitrussell/#BenchmarkingEconomicEfficiency.deaprofitrussell","page":"Profit Russell model","title":"BenchmarkingEconomicEfficiency.deaprofitrussell","text":"deaprofitrussell(X, Y, W, P)\n\nCompute profit efficiency using Russell data envelopment analysis for inputs X, outputs Y, price of inputs W, and price of outputs P.\n\nOptional Arguments\n\nnames: a vector of strings with the names of the decision making units.\n\nExamples\n\njulia> X = [2; 4; 8; 12; 6; 14; 14; 9.412];\n\njulia> Y = [1; 5; 8; 9; 3; 7; 9; 2.353];\n\njulia> W = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> P = [2; 2; 2; 2; 2; 2; 2; 2];\n\njulia> deaprofitrussell(X, Y, W, P)\nRussell Profit DEA Model \nDMUs = 8; Inputs = 1; Outputs = 1\nOrientation = Graph; Returns to Scale = VRS\n─────────────────────────────────────\n       Profit   Technical  Allocative\n─────────────────────────────────────\n1  2.0         3.50173e-7  2.0\n2  0.25        2.49141e-8  0.25\n3  2.84063e-8  8.48991e-9  1.99164e-8\n4  0.0833334   2.9862e-8   0.0833333\n5  0.666667    0.366667    0.3\n6  0.285714    0.276786    0.0089286\n7  0.142857    0.0714286   0.0714286\n8  1.34998     0.552205    0.797773\n─────────────────────────────────────\n\n\n\n\n\n","category":"function"},{"location":"revenue/revenuerussell/","page":"Revenue Russell model","title":"Revenue Russell model","text":"CurrentModule = BenchmarkingEconomicEfficiency\nDocTestSetup = quote\n    using BenchmarkingEconomicEfficiency\nend","category":"page"},{"location":"revenue/revenuerussell/#Revenue-Russell-model","page":"Revenue Russell model","title":"Revenue Russell model","text":"","category":"section"},{"location":"revenue/revenuerussell/","page":"Revenue Russell model","title":"Revenue Russell model","text":"The revenue Russell model is computed by solving am output Russell DEA model for the technical efficiency.","category":"page"},{"location":"revenue/revenuerussell/","page":"Revenue Russell model","title":"Revenue Russell model","text":"In this example we compute the revenue efficiency Russell measure under variable returns to scale:","category":"page"},{"location":"revenue/revenuerussell/","page":"Revenue Russell model","title":"Revenue Russell model","text":"julia> X = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> Y = [7 7; 4 8; 8 4; 3 5; 3 3; 8 2; 6 4; 1.5 5];\n\njulia> P = [1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1];\n\njulia> revenuerussell = dearevenuerussell(X, Y, P)\nRussell Revenue DEA Model \nDMUs = 8; Inputs = 1; Outputs = 2\nOrientation = Output; Returns to Scale = VRS\n──────────────────────────────────\n   Revenue  Technical   Allocative\n──────────────────────────────────\n1  0.0       0.0       0.0\n2  0.25      0.0       0.25\n3  0.25      0.0       0.25\n4  1.0       0.866667  0.133333\n5  1.33333   1.33333   2.22045e-16\n6  1.0       0.5       0.5\n7  0.5       0.458333  0.0416667\n8  2.5       2.05556   0.444444\n──────────────────────────────────","category":"page"},{"location":"revenue/revenuerussell/","page":"Revenue Russell model","title":"Revenue Russell model","text":"Estimated economic, technical and allocative efficiency scores are returned with the efficiency function:","category":"page"},{"location":"revenue/revenuerussell/","page":"Revenue Russell model","title":"Revenue Russell model","text":"julia> efficiency(revenuerussell, :Economic)\n8-element Vector{Float64}:\n 0.0\n 0.25\n 0.25\n 1.0\n 1.3333333333333333\n 1.0\n 0.5\n 2.5\n\njulia> efficiency(revenuerussell, :Technical)\n8-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n 0.8666666666666665\n 1.333333333333333\n 0.5\n 0.4583333333333335\n 2.0555555555555554\n\njulia> efficiency(revenuerussell, :Allocative)\n8-element Vector{Float64}:\n 0.0\n 0.25\n 0.25\n 0.13333333333333353\n 2.220446049250313e-16\n 0.5\n 0.04166666666666652\n 0.44444444444444464","category":"page"},{"location":"revenue/revenuerussell/#dearevenuerussell-Function-Documentation","page":"Revenue Russell model","title":"dearevenuerussell Function Documentation","text":"","category":"section"},{"location":"revenue/revenuerussell/","page":"Revenue Russell model","title":"Revenue Russell model","text":"dearevenuerussell","category":"page"},{"location":"revenue/revenuerussell/#BenchmarkingEconomicEfficiency.dearevenuerussell","page":"Revenue Russell model","title":"BenchmarkingEconomicEfficiency.dearevenuerussell","text":"dearevenuerussell(X, Y, P)\n\nCompute revenue efficiency using Russell data envelopment analysis for inputs X, outputs Y and price of outputs P.\n\nOptional Arguments\n\nrts=:VRS: chooses variable returns to scale. For constant returns to scale choose :CRS.\nnames: a vector of strings with the names of the decision making units.\n\nExamples\n\njulia> X = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> Y = [7 7; 4 8; 8 4; 3 5; 3 3; 8 2; 6 4; 1.5 5];\n\njulia> P = [1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1];\n\njulia> dearevenuerussell(X, Y, P)\nRussell Revenue DEA Model \nDMUs = 8; Inputs = 1; Outputs = 2\nOrientation = Output; Returns to Scale = VRS\n──────────────────────────────────\n   Revenue  Technical   Allocative\n──────────────────────────────────\n1  0.0       0.0       0.0\n2  0.25      0.0       0.25\n3  0.25      0.0       0.25\n4  1.0       0.866667  0.133333\n5  1.33333   1.33333   2.22045e-16\n6  1.0       0.5       0.5\n7  0.5       0.458333  0.0416667\n8  2.5       2.05556   0.444444\n──────────────────────────────────\n\n\n\n\n\n","category":"function"},{"location":"revenue/revenueholder/","page":"Revenue Hölder model","title":"Revenue Hölder model","text":"CurrentModule = BenchmarkingEconomicEfficiency\nDocTestSetup = quote\n    using BenchmarkingEconomicEfficiency\nend","category":"page"},{"location":"revenue/revenueholder/#Revenue-Hölder-model","page":"Revenue Hölder model","title":"Revenue Hölder model","text":"","category":"section"},{"location":"revenue/revenueholder/","page":"Revenue Hölder model","title":"Revenue Hölder model","text":"The revenue Hölder model is computed by solving am output Hölder DEA model for the technical efficiency.","category":"page"},{"location":"revenue/revenueholder/","page":"Revenue Hölder model","title":"Revenue Hölder model","text":"In this example we compute the revenue efficiency Hölder L1 measure under variable returns to scale:","category":"page"},{"location":"revenue/revenueholder/","page":"Revenue Hölder model","title":"Revenue Hölder model","text":"julia> X = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> Y = [7 7; 4 8; 8 4; 3 5; 3 3; 8 2; 6 4; 1.5 5];\n\njulia> P = [1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1];\n\njulia> revenueholder = dearevenueholder(X, Y, P, l = 1)\nRevenue Hölder L1 DEA Model \nDMUs = 8; Inputs = 1; Outputs = 2\nOrientation = Output; Returns to Scale = VRS\n─────────────────────────────────\n   Revenue  Technical  Allocative\n─────────────────────────────────\n1      0.0        0.0         0.0\n2      2.0        0.0         2.0\n3      2.0        0.0         2.0\n4      6.0        3.0         3.0\n5      8.0        5.0         3.0\n6      4.0        0.0         4.0\n7      4.0        2.0         2.0\n8      7.5        3.0         4.5\n─────────────────────────────────","category":"page"},{"location":"revenue/revenueholder/","page":"Revenue Hölder model","title":"Revenue Hölder model","text":"Estimated economic, technical and allocative efficiency scores are returned with the efficiency function:","category":"page"},{"location":"revenue/revenueholder/","page":"Revenue Hölder model","title":"Revenue Hölder model","text":"julia> efficiency(revenueholder, :Economic)\n8-element Vector{Float64}:\n 0.0\n 2.0\n 2.0\n 6.0\n 8.0\n 4.0\n 4.0\n 7.5","category":"page"},{"location":"revenue/revenueholder/","page":"Revenue Hölder model","title":"Revenue Hölder model","text":"julia> efficiency(revenueholder, :Technical)\n8-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n 2.9999999999999996\n 5.0\n 0.0\n 2.0\n 2.9999999999999996","category":"page"},{"location":"revenue/revenueholder/","page":"Revenue Hölder model","title":"Revenue Hölder model","text":"julia> efficiency(revenueholder, :Allocative)\n8-element Vector{Float64}:\n 0.0\n 2.0\n 2.0\n 3.0000000000000004\n 3.0\n 4.0\n 2.0\n 4.5","category":"page"},{"location":"revenue/revenueholder/#dearevenueholder-Function-Documentation","page":"Revenue Hölder model","title":"dearevenueholder Function Documentation","text":"","category":"section"},{"location":"revenue/revenueholder/","page":"Revenue Hölder model","title":"Revenue Hölder model","text":"dearevenueholder","category":"page"},{"location":"revenue/revenueholder/#BenchmarkingEconomicEfficiency.dearevenueholder","page":"Revenue Hölder model","title":"BenchmarkingEconomicEfficiency.dearevenueholder","text":"dearevenueholder(X, Y, W; l)\n\nCompute revenue efficiency using data envelopment analysis for inputs X, outputs Y and price of outputs P.\n\nHölder norm l specification\n\n1.\n2.\nInf.\n\nOptional Arguments\n\nrts=:VRS: chooses variable returns to scale. For constant returns to scale choose :CRS.\nnames: a vector of strings with the names of the decision making units.\n\nExamples\n\njulia> X = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> Y = [7 7; 4 8; 8 4; 3 5; 3 3; 8 2; 6 4; 1.5 5];\n\njulia> P = [1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1];\n\njulia> dearevenueholder(X, Y, P, l = 1)\nRevenue Hölder L1 DEA Model \nDMUs = 8; Inputs = 1; Outputs = 2\nOrientation = Output; Returns to Scale = VRS\n─────────────────────────────────\n   Revenue  Technical  Allocative\n─────────────────────────────────\n1      0.0        0.0         0.0\n2      2.0        0.0         2.0\n3      2.0        0.0         2.0\n4      6.0        3.0         3.0\n5      8.0        5.0         3.0\n6      4.0        0.0         4.0\n7      4.0        2.0         2.0\n8      7.5        3.0         4.5\n─────────────────────────────────\n\n\n\n\n\n","category":"function"},{"location":"cost/costgda/","page":"Cost General Direct Approach model","title":"Cost General Direct Approach model","text":"CurrentModule = BenchmarkingEconomicEfficiency\nDocTestSetup = quote\n    using BenchmarkingEconomicEfficiency\nend","category":"page"},{"location":"cost/costgda/#Cost-General-Direct-Approach-model","page":"Cost General Direct Approach model","title":"Cost General Direct Approach model","text":"","category":"section"},{"location":"cost/costgda/","page":"Cost General Direct Approach model","title":"Cost General Direct Approach model","text":"In this example we compute the cost efficiency General Direct Approach measure for the Enhanced Russell Graph associated efficiency measure under variable returns to scale:","category":"page"},{"location":"cost/costgda/","page":"Cost General Direct Approach model","title":"Cost General Direct Approach model","text":"julia> X = [2 2; 1 4; 4 1; 4 3; 5 5; 6 1; 2 5; 1.6 8];\n\njulia> Y = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> W = [1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1];\n\njulia> costgda = deacostgda(X, Y, W, :ERG)\nGeneral Direct Approach Cost DEA Model \nDMUs = 8; Inputs = 2; Outputs = 1\nReturns to Scale = VRS\nAssociated efficiency measure = ERG\n──────────────────────────────────\n       Cost  Technical  Allocative\n──────────────────────────────────\n1  0.0        0.0        0.0\n2  0.5        0.0        0.5\n3  0.5        0.0        0.5\n4  0.416667   0.416667   0.0\n5  0.6        0.6        0.0\n6  0.25       0.166667   0.0833333\n7  0.525      0.35       0.175\n8  0.532609   0.4375     0.0951087\n──────────────────────────────────","category":"page"},{"location":"cost/costgda/","page":"Cost General Direct Approach model","title":"Cost General Direct Approach model","text":"Estimated economic, technical and allocative efficiency scores are returned with the efficiency function:","category":"page"},{"location":"cost/costgda/","page":"Cost General Direct Approach model","title":"Cost General Direct Approach model","text":"julia> efficiency(costgda, :Economic)\n8-element Vector{Float64}:\n 0.0\n 0.5\n 0.5\n 0.41666666666666663\n 0.6\n 0.24999999999999992\n 0.525\n 0.5326086956521738","category":"page"},{"location":"cost/costgda/","page":"Cost General Direct Approach model","title":"Cost General Direct Approach model","text":"julia> efficiency(costgda, :Technical)\n8-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n 0.41666666666666663\n 0.6\n 0.16666666666666663\n 0.35\n 0.4375","category":"page"},{"location":"cost/costgda/","page":"Cost General Direct Approach model","title":"Cost General Direct Approach model","text":"julia> efficiency(costgda, :Allocative)\n8-element Vector{Float64}:\n 0.0\n 0.5\n 0.5\n 0.0\n 0.0\n 0.08333333333333331\n 0.175\n 0.09510869565217392","category":"page"},{"location":"cost/costgda/#deacostgda-Function-Documentation","page":"Cost General Direct Approach model","title":"deacostgda Function Documentation","text":"","category":"section"},{"location":"cost/costgda/","page":"Cost General Direct Approach model","title":"Cost General Direct Approach model","text":"deacostgda","category":"page"},{"location":"cost/costgda/#BenchmarkingEconomicEfficiency.deacostgda","page":"Cost General Direct Approach model","title":"BenchmarkingEconomicEfficiency.deacostgda","text":"deacostgda(X, Y, W, measure)\n\nCompute cost efficiency using data envelopment analysis General Direct Approach model for inputs X, outputs Y, price of inputs W, and efficiency measure.\n\nMeasure specification:\n\n:ERG: Enhanced Russell Graph (or Slack Based Measure (SBM)).\n\nOptional Arguments\n\nrts=:VRS: choose between constant returns to scale :CRS or variable returns to scale :VRS.\natol=1e-6: tolerance for DMU to be considered efficient.\nnames: a vector of strings with the names of the decision making units.\n\nExamples\n\njulia> X = [2 2; 1 4; 4 1; 4 3; 5 5; 6 1; 2 5; 1.6 8];\n\njulia> Y = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> W = [1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1];\n\njulia> deacostgda(X, Y, W, :ERG)\nGeneral Direct Approach Cost DEA Model \nDMUs = 8; Inputs = 2; Outputs = 1\nReturns to Scale = VRS\nAssociated efficiency measure = ERG\n──────────────────────────────────\n       Cost  Technical  Allocative\n──────────────────────────────────\n1  0.0        0.0        0.0\n2  0.5        0.0        0.5\n3  0.5        0.0        0.5\n4  0.416667   0.416667   0.0\n5  0.6        0.6        0.0\n6  0.25       0.166667   0.0833333\n7  0.525      0.35       0.175\n8  0.532609   0.4375     0.0951087\n──────────────────────────────────\n\n\n\n\n\n","category":"function"},{"location":"#BenchmarkingEconomicEfficiency.jl","page":"Home","title":"BenchmarkingEconomicEfficiency.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BenchmarkingEconomicEfficiency.jl is a Julia package that provides functions for economic efficiency using Data Envelopment Analysis (DEA). The package is an extension of the DataEnvelopmentAnalysis.jl package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package is being developed for Julia 1.0 and above on Linux, macOS, and Windows.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The packes uses internally the JuMP modelling language for mathematicall optimization with solvers GLPK and Ipopt.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package can be installed with the Julia package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg; Pkg.add(\"BenchmarkingEconomicEfficiency\")","category":"page"},{"location":"#Tutorial","page":"Home","title":"Tutorial","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For a tutorial on how to use the package, check the documentation on the Cost Directional Distance Function model.","category":"page"},{"location":"#Available-models","page":"Home","title":"Available models","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Cost DEA models:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"cost/costddf.md\", \"cost/costadditive.md\", \"cost/costrussell.md\", \"cost/costholder.md\", \"cost/costrddf.md\", \"cost/costgda.md\"]\nDepth = 2","category":"page"},{"location":"","page":"Home","title":"Home","text":"Revenue DEA models:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"revenue/revenueddf.md\", \"revenue/revenueadditive.md\", \"revenue/revenuerussell.md\", \"revenue/revenueholder.md\", \"revenue/revenuerddf.md\"]\nDepth = 2","category":"page"},{"location":"","page":"Home","title":"Home","text":"Profit DEA models:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"profit/profitadditive.md\", \"profit/profitrussell.md\", \"profit/profitenhancedrussell.md\", \"profit/profitmodifiedddf.md\", \"profit/profitholder.md\", \"profit/profitrddf.md\"]\nDepth = 2","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DataEnvelopmentAnalysis.jl is being developed by Javier Barbero and José Luís Zofío.","category":"page"},{"location":"cost/costadditive/","page":"Cost Additive model","title":"Cost Additive model","text":"CurrentModule = BenchmarkingEconomicEfficiency\nDocTestSetup = quote\n    using BenchmarkingEconomicEfficiency\nend","category":"page"},{"location":"cost/costadditive/#Cost-Additive-model","page":"Cost Additive model","title":"Cost Additive model","text":"","category":"section"},{"location":"cost/costadditive/","page":"Cost Additive model","title":"Cost Additive model","text":"The cost additive model is computed by solving an additive DEA model for the technical efficiency.","category":"page"},{"location":"cost/costadditive/","page":"Cost Additive model","title":"Cost Additive model","text":"In this example we compute the cost efficiency additive measure under variable returns to scale:","category":"page"},{"location":"cost/costadditive/","page":"Cost Additive model","title":"Cost Additive model","text":"julia> X = [2 2; 1 4; 4 1; 4 3; 5 5; 6 1; 2 5; 1.6 8];\n\njulia> Y = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> W = [1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1];\n\njulia> costadd = deacostadd(X, Y, W, :Ones)\nCost Additive DEA Model \nDMUs = 8; Inputs = 2; Outputs = 1\nOrientation = Input; Returns to Scale = VRS\nWeights = Ones\n──────────────────────────────\n   Cost  Technical  Allocative\n──────────────────────────────\n1   0.0        0.0         0.0\n2   1.0        0.0         1.0\n3   1.0        0.0         1.0\n4   3.0        3.0         0.0\n5   6.0        6.0         0.0\n6   3.0        2.0         1.0\n7   3.0        3.0         0.0\n8   5.6        5.2         0.4\n──────────────────────────────","category":"page"},{"location":"cost/costadditive/","page":"Cost Additive model","title":"Cost Additive model","text":"Estimated economic, technical and allocative efficiency scores are returned with the efficiency function:","category":"page"},{"location":"cost/costadditive/","page":"Cost Additive model","title":"Cost Additive model","text":"julia> efficiency(costadd, :Economic)\n8-element Vector{Float64}:\n 0.0\n 1.0\n 1.0\n 3.0\n 6.0\n 3.0\n 3.0\n 5.6\n\njulia> efficiency(costadd, :Technical)\n8-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n 3.0\n 6.0\n 2.0000000000000004\n 3.0\n 5.200000000000001\n\njulia> efficiency(costadd, :Allocative)\n8-element Vector{Float64}:\n 0.0\n 1.0\n 1.0\n 0.0\n 0.0\n 0.9999999999999996\n 0.0\n 0.3999999999999986","category":"page"},{"location":"cost/costadditive/#deacostadd-Function-Documentation","page":"Cost Additive model","title":"deacostadd Function Documentation","text":"","category":"section"},{"location":"cost/costadditive/","page":"Cost Additive model","title":"Cost Additive model","text":"deacostadd","category":"page"},{"location":"cost/costadditive/#BenchmarkingEconomicEfficiency.deacostadd","page":"Cost Additive model","title":"BenchmarkingEconomicEfficiency.deacostadd","text":"deacostadditive(X, Y, W, model)\n\nCompute cost efficiency using additive data envelopment analysis for inputs X, outputs Y and price of inputs W.\n\nModel specification:\n\n:Ones: standard additive DEA model.\n:MIP: Measure of Inefficiency Proportions. (Charnes et al., 1987; Cooper et al., 1999)\n:Normalized: Normalized weighted additive DEA model. (Lovell and Pastor, 1995)\n:RAM: Range Adjusted Measure. (Cooper et al., 1999)\n:BAM: Bounded Adjusted Measure. (Cooper et al, 2011)\n:Custom: User supplied weights.\n\nOptional Arguments\n\nrts=:VRS: chooses variable returns to scale. For constant returns to scale choose :CRS.\nrhoX: matrix of weights of inputs. Only if model=:Custom.\ndisposal=:Strong: chooses strong disposal of outputs. For weak disposal choose :Weak.\nnames: a vector of strings with the names of the decision making units.\n\nExamples\n\njulia> X = [2 2; 1 4; 4 1; 4 3; 5 5; 6 1; 2 5; 1.6 8];\n\njulia> Y = [1; 1; 1; 1; 1; 1; 1; 1];\n\njulia> W = [1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1; 1 1];\n\njulia> deacostadd(X, Y, W, :Ones)\nCost Additive DEA Model \nDMUs = 8; Inputs = 2; Outputs = 1\nOrientation = Input; Returns to Scale = VRS\nWeights = Ones\n──────────────────────────────\n   Cost  Technical  Allocative\n──────────────────────────────\n1   0.0        0.0         0.0\n2   1.0        0.0         1.0\n3   1.0        0.0         1.0\n4   3.0        3.0         0.0\n5   6.0        6.0         0.0\n6   3.0        2.0         1.0\n7   3.0        3.0         0.0\n8   5.6        5.2         0.4\n──────────────────────────────\n\n\n\n\n\n","category":"function"}]
}
